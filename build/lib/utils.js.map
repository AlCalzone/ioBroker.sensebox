{
  "version": 3,
  "sources": ["../../src/lib/utils.ts"],
  "sourcesContent": ["export function computeDeviceId(self: ioBroker.Adapter, boxId: string): string {\n\treturn `${self.namespace}.${boxId}`;\n}\n\nexport function computeSensorId(\n\tself: ioBroker.Adapter,\n\tboxId: string,\n\tsensor: Sensor,\n): string {\n\t// Try to determine a readable but unique name for the sensor.\n\t// Box ID:    629dd1ed87a60b001c00f2d8\n\t// Sensor ID: 629dd1ed87a60b001c00f2dc\n\t// Distinct (min. 4 chars):       ^^^^\n\t// Result: Temperatur_HDC1080_f2dc\n\n\tlet distinctChars = boxId.length;\n\tfor (let i = 1; i <= boxId.length - 4; i++) {\n\t\tif (boxId[i] === sensor._id[i]) {\n\t\t\tdistinctChars--;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\tconst suffix = sensor._id.slice(-distinctChars);\n\n\tconst escapedName = sensor.title.replace(/[\\.\\s]+/g, \"_\");\n\tconst escapedSensorType = sensor.sensorType.replace(/[\\.\\s]+/g, \"\");\n\n\treturn `${self.namespace}.${boxId}.${escapedName}_${escapedSensorType}_${suffix}`;\n}\n\nexport function getStateRole(sensor: Sensor): string {\n\tif (sensor.icon === \"osem-thermometer\") return \"value.temperature\";\n\tif (sensor.icon === \"osem-humidity\") return \"value.humidity\";\n\t// TODO: add others\n\treturn \"value\";\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,SAAS,gBAAgB,MAAwB,OAAuB;AAC9E,SAAO,GAAG,KAAK,aAAa;AAC7B;AAEO,SAAS,gBACf,MACA,OACA,QACS;AAOT,MAAI,gBAAgB,MAAM;AAC1B,WAAS,IAAI,GAAG,KAAK,MAAM,SAAS,GAAG,KAAK;AAC3C,QAAI,MAAM,OAAO,OAAO,IAAI,IAAI;AAC/B;AAAA,IACD,OAAO;AACN;AAAA,IACD;AAAA,EACD;AACA,QAAM,SAAS,OAAO,IAAI,MAAM,CAAC,aAAa;AAE9C,QAAM,cAAc,OAAO,MAAM,QAAQ,YAAY,GAAG;AACxD,QAAM,oBAAoB,OAAO,WAAW,QAAQ,YAAY,EAAE;AAElE,SAAO,GAAG,KAAK,aAAa,SAAS,eAAe,qBAAqB;AAC1E;AAEO,SAAS,aAAa,QAAwB;AACpD,MAAI,OAAO,SAAS;AAAoB,WAAO;AAC/C,MAAI,OAAO,SAAS;AAAiB,WAAO;AAE5C,SAAO;AACR;",
  "names": []
}
