{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.1.1\n */\n\nimport * as utils from \"@iobroker/adapter-core\";\nimport { isObject } from \"alcalzone-shared/typeguards\";\n\nimport axios from \"axios\";\nimport { computeDeviceId, computeSensorId, getStateRole } from \"./lib/utils\";\n\nclass Sensebox extends utils.Adapter {\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"sensebox\",\n\t\t});\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\t// this.on(\"stateChange\", this.onStateChange.bind(this));\n\t\t// this.on(\"objectChange\", this.onObjectChange.bind(this));\n\t\t// this.on(\"message\", this.onMessage.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t}\n\n\tprivate nextQuery: ioBroker.Timeout | undefined;\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\tthis.nextQuery = this.setTimeout(() => this.query(), 0);\n\t}\n\n\tprivate async query(): Promise<void> {\n\t\tthis.nextQuery = undefined;\n\n\t\tthis.log.debug(`Querying ${this.config.boxes.length} boxes...`);\n\t\tfor (const boxId of this.config.boxes) {\n\t\t\tawait this.queryBox(boxId);\n\t\t}\n\n\t\tthis.nextQuery = this.setTimeout(\n\t\t\t() => this.query(),\n\t\t\t// Change the interval randomly between 85% and 115% of the configured time\n\t\t\t// to avoid hitting the API too regularly\n\t\t\tthis.config.queryInterval * (0.85 + 0.3 * Math.random()),\n\t\t);\n\t}\n\n\tprivate async queryBox(boxId: string): Promise<void> {\n\t\tconst url = `https://api.opensensemap.org/boxes/${boxId}`;\n\t\tlet box: SenseBox;\n\t\ttry {\n\t\t\tthis.log.debug(`Querying box ${boxId}...`);\n\t\t\t({ data: box } = await axios.get<SenseBox>(url, {\n\t\t\t\ttimeout: 60000,\n\t\t\t\theaders: { \"User-Agent\": `ioBroker.sensebox ${this.version}` },\n\t\t\t}));\n\t\t\tthis.log.debug(`success!`);\n\t\t} catch (e: any) {\n\t\t\tlet message = `Error querying box ${boxId}. ${e.message}`;\n\t\t\tif (\n\t\t\t\te.response &&\n\t\t\t\tisObject(e.response.data) &&\n\t\t\t\ttypeof e.response.data.message === \"string\"\n\t\t\t) {\n\t\t\t\tmessage += `: ${e.response.data.message}`;\n\t\t\t}\n\t\t\tthis.log.error(message);\n\t\t\treturn;\n\t\t}\n\n\t\t// Create an object for each box\n\t\tconst deviceId = computeDeviceId(this, boxId);\n\t\tawait this.setObjectNotExistsAsync(deviceId, {\n\t\t\ttype: \"device\",\n\t\t\tcommon: {\n\t\t\t\tname: box.name,\n\t\t\t},\n\t\t\tnative: {\n\t\t\t\texposure: box.exposure,\n\t\t\t\tmodel: box.model,\n\t\t\t},\n\t\t});\n\n\t\tfor (const sensor of box.sensors) {\n\t\t\tconst stateId = computeSensorId(this, boxId, sensor);\n\t\t\tawait this.setObjectNotExistsAsync(stateId, {\n\t\t\t\ttype: \"state\",\n\t\t\t\tcommon: {\n\t\t\t\t\ttype: \"number\",\n\t\t\t\t\trole: getStateRole(sensor),\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t\tunit: sensor.unit,\n\t\t\t\t\tname: sensor.title,\n\t\t\t\t},\n\t\t\t\tnative: {\n\t\t\t\t\tid: sensor._id,\n\t\t\t\t\ttype: sensor.sensorType,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tawait this.setStateAsync(stateId, {\n\t\t\t\tval: parseFloat(sensor.lastMeasurement.value),\n\t\t\t\tack: true,\n\t\t\t\tts: new Date(sensor.lastMeasurement.createdAt).getTime(),\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\tif (this.nextQuery) this.clearTimeout(this.nextQuery);\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t// /**\n\t//  * Is called if a subscribed state changes\n\t//  */\n\t// private onStateChange(\n\t// \tid: string,\n\t// \tstate: ioBroker.State | null | undefined,\n\t// ): void {\n\t// \tif (state) {\n\t// \t\t// The state was changed\n\t// \t\tthis.log.info(\n\t// \t\t\t`state ${id} changed: ${state.val} (ack = ${state.ack})`,\n\t// \t\t);\n\t// \t} else {\n\t// \t\t// The state was deleted\n\t// \t\tthis.log.info(`state ${id} deleted`);\n\t// \t}\n\t// }\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === \"object\" && obj.message) {\n\t// \t\tif (obj.command === \"send\") {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info(\"send command\");\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) =>\n\t\tnew Sensebox(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Sensebox())();\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
